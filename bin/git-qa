#!/usr/bin/env node

const { program } = require('commander');
const packageJson = require('../package.json');
const { isGitRepository } = require('../src/lib/git/validation');
const { getCommits } = require('../src/lib/git/log');
const { analyzeCommits, analyzeHotfixFilesAuto } = require('../src/lib/analysis/engine');
const { generateConsoleReport } = require('../src/report/consoleReporter');
const { generateHtmlReport } = require('../src/report/htmlReporter');
const { generateCsvReport } = require('../src/report/csvReporter');
const { generateJsonReport } = require('../src/report/jsonReporter');

program
  .version(packageJson.version);

program
  .command('analyze')
  .description('Analyze a git repository')
  .option('-b, --branches <branches>', 'Branches to analyze (comma-separated, default: current branch)')
  .option('-s, --since <date>', "Analyze commits after date (e.g., '2023-01-01' or '3 months ago')")
  .option('-u, --until <date>', 'Analyze commits before date')
  .option('-a, --authors <authors>', 'Filter by authors (comma-separated)')
  .option('-k, --keywords <words>', 'Custom fix/hotfix keywords (comma-separated)')
  .option('-o, --output <dir>', 'Output directory for reports (default: ./git-qa-report)')
  .option('-f, --format <format>', 'Output format (html, csv, json, text)', 'html')
  .option('-v, --verbose', 'Verbose output')
  .action(async (options) => {
    const isRepo = await isGitRepository();
    if (!isRepo) {
      console.error('Error: Not a git repository.');
      process.exit(1);
    }

    console.log('Analyzing git repository with options:', options); // Can be removed if too noisy
    const commits = await getCommits(options);
    // console.log('DEBUG: First 3 commits:', commits.slice(0, 3));
    const analysisResults = await analyzeCommits(commits, options.keywords);
    // console.log('DEBUG: analysisResults.commitFrequency:', analysisResults.commitFrequency);

    generateConsoleReport(analysisResults, options);

    if (options.format === 'html') {
      // Also analyze hotfix files and add to report data
      const { topHotfixFiles } = await analyzeHotfixFilesAuto('remotes/origin/master');
      analysisResults.topHotfixFiles = topHotfixFiles;
      await generateHtmlReport(analysisResults, options);
    } else if (options.format === 'csv') {
      await generateCsvReport(analysisResults, options);
    } else if (options.format === 'json') {
      await generateJsonReport(analysisResults, options);
    }
    // If options.format is 'text', only the console report (already generated by generateConsoleReport) is effectively produced.
    // No additional file output is specified for 'text' format beyond the console.
  });

program
  .command('hotfix-files')
  .description('Analyze files most frequently affected by hotfix merges into master')
  .option('-b, --branch <branch>', 'Target branch to analyze (default: remotes/origin/master)', 'remotes/origin/master')
  .action(async (options) => {
    const branch = options.branch || 'remotes/origin/master';
    console.log(`Analyzing hotfix merges into ${branch}...`);
    const { topHotfixFiles, hotfixFiles, hotfixCommits } = await analyzeHotfixFilesAuto(branch);
    // console.log('\nDEBUG: Hotfix merge messages and files:');
    hotfixCommits.forEach((merge, i) => {
      // console.log(`\n${i + 1}. ${merge.hash} | ${merge.message}`);
      if (merge.files && merge.files.length > 0) {
        // console.log('   Files:', merge.files.join(', '));
      } else {
        // console.log('   Files: (none)');
      }
    });
    console.log('\nTop 10 files affected by hotfix merges:');
    topHotfixFiles.forEach((f, i) => {
      console.log(`${i + 1}. ${f.file} (${f.count} times)`);
    });
    console.log(`\nTotal hotfix merges analyzed: ${hotfixCommits.length}`);
  });

program.parse(process.argv);

